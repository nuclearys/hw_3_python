{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1XP0dsb-T3ORPYv4YQFV5j23PknFH06O6","timestamp":1727810471358}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":254,"metadata":{"id":"MXXTuy_o0sjk","executionInfo":{"status":"ok","timestamp":1727874907293,"user_tz":-180,"elapsed":3546,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}}},"outputs":[],"source":["!pip install -q -U kaggle_environments"]},{"cell_type":"code","source":["last_counter_action = 0"],"metadata":{"id":"Pg5CZPMGUF7F","executionInfo":{"status":"ok","timestamp":1727874908034,"user_tz":-180,"elapsed":2,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}}},"execution_count":255,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import random\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from kaggle_environments import make, evaluate\n","from kaggle_environments import utils\n","!apt-get install git"],"metadata":{"id":"yz23vWHD0wcj","executionInfo":{"status":"ok","timestamp":1727875635527,"user_tz":-180,"elapsed":4041,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ab1120df-6eb7-4671-d709-5c202642f8c2"},"execution_count":280,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","git is already the newest version (1:2.34.1-1ubuntu1.11).\n","0 upgraded, 0 newly installed, 0 to remove and 49 not upgraded.\n"]}]},{"cell_type":"markdown","source":["Агент, который выбирает всегда камень"],"metadata":{"id":"0kuo6IOxiRub"}},{"cell_type":"code","source":["%%writefile rock_agent.py\n","\n","#Example of the simple agent\n","#0 - rock\n","#1 - paper\n","#2 - scissors\n","\n","def agent_always_rock(observation, configuration):\n","    return 0  # Всегда выбирает камень"],"metadata":{"id":"bqTqV7B92rJ6","executionInfo":{"status":"ok","timestamp":1727874919547,"user_tz":-180,"elapsed":437,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"930cfe72-082d-4956-ad29-2ee4c13cb7a8","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":259,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting rock_agent.py\n"]}]},{"cell_type":"markdown","source":["Агент, которы выбирает всегда только \"Бумага\""],"metadata":{"id":"4ihdz4vIqkxD"}},{"cell_type":"code","source":["%%writefile paper_agent.py\n","\n","#Example of the simple agent\n","#0 - rock\n","#1 - paper\n","#2 - scissors\n","\n","def agent_always_paper(observation, configuration):\n","    return 1  # Всегда выбирает бумагу"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KWQ36tR3qHQo","executionInfo":{"status":"ok","timestamp":1727874921597,"user_tz":-180,"elapsed":432,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"59dfc215-e823-4a33-c70a-dd78cec10c5f"},"execution_count":260,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting paper_agent.py\n"]}]},{"cell_type":"markdown","source":["Агент, который выбирает всегда \"Ножницы\""],"metadata":{"id":"hN7wYGOJrZ_z"}},{"cell_type":"code","source":["%%writefile scissors_agent.py\n","\n","#Example of the simple agent\n","#0 - rock\n","#1 - paper\n","#2 - scissors\n","\n","def agent_always_scissors(observation, configuration):\n","    return 2  # Всегда выбирает бумагу"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gSGrhMfWrfCS","executionInfo":{"status":"ok","timestamp":1727874923697,"user_tz":-180,"elapsed":445,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"fa00cd89-303f-4e26-deab-0bee0a2b824b"},"execution_count":261,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting scissors_agent.py\n"]}]},{"cell_type":"markdown","source":["Попробуем теперь использовать информацию о прошлых действиях противника. Опишем агента, который производит то же самое действие, что и оппонент на прошлом ходу"],"metadata":{"id":"et1J5hUGigeh"}},{"cell_type":"code","source":["%%writefile copy_opponent.py\n","\n","#Example\n","def copy_opponent(observation, configuration):\n","    #in case we have information about opponent last move\n","    if observation.step > 0:\n","        return observation.lastOpponentAction\n","    #initial step\n","    else:\n","        return 0"],"metadata":{"id":"7l6Ttw6qi0jk","executionInfo":{"status":"ok","timestamp":1727874925459,"user_tz":-180,"elapsed":581,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"e993c9ec-9f15-470c-c93c-dab93ea6ad72","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":262,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting copy_opponent.py\n"]}]},{"cell_type":"code","source":["%%writefile copy_reactivity.py\n","\n","def reactionary(observation, configuration):\n","    global last_react_action\n","    if observation.step == 0:\n","        last_react_action = random.randrange(0, configuration.signs)\n","    elif get_score(last_react_action, observation.lastOpponentAction) <= 1:\n","        last_react_action = (observation.lastOpponentAction + 1) % configuration.signs\n","\n","    return last_react_action"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hg_IwFia8rQV","executionInfo":{"status":"ok","timestamp":1727874926611,"user_tz":-180,"elapsed":1,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"8d12bbfe-b1ce-4461-8f02-96a9703d710e"},"execution_count":263,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting copy_reactivity.py\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"GtFHZJkjv455"}},{"cell_type":"markdown","source":["Воспользуемся функцией evaluate из библиотеки kaggle_environments с помощью которой запустим наших агентов и проведем эксперимент на заданном количестве игр"],"metadata":{"id":"ExgIpXUVjbjN"}},{"cell_type":"code","source":["evaluate(\n","    \"rps\", #environment to use - no need to change\n","    [\"rock_agent.py\", \"copy_reactivity.py\"], #agents to evaluate\n","    configuration={\"episodeSteps\": 100} #number of episodes\n",")"],"metadata":{"id":"wv6Ip6M004xa","executionInfo":{"status":"ok","timestamp":1727874929618,"user_tz":-180,"elapsed":759,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"922abce0-6cae-44e0-fed1-b3ef73cb38d5","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":264,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[1, None]]"]},"metadata":{},"execution_count":264}]},{"cell_type":"code","source":["evaluate(\n","    \"rps\", #environment to use - no need to change\n","    [\"rock_agent.py\", \"copy_reactionary.py\"], #agents to evaluate\n","    configuration={\"episodeSteps\": 100} #number of episodes\n",")"],"metadata":{"id":"FC6_QWe9k3rr","executionInfo":{"status":"ok","timestamp":1727874930100,"user_tz":-180,"elapsed":2,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"5b92cd41-9a02-4c16-e835-a4e97f7406fa","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":265,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[-98.0, 98.0]]"]},"metadata":{},"execution_count":265}]},{"cell_type":"code","source":["%%writefile copy_statistical.py\n","\n","def statistical(observation, configuration):\n","    global action_histogram\n","    if observation.step == 0:\n","        action_histogram = {}\n","        return\n","    action = observation.lastOpponentAction\n","    if action not in action_histogram:\n","        action_histogram[action] = 0\n","    action_histogram[action] += 1\n","    mode_action = None\n","    mode_action_count = None\n","    for k, v in action_histogram.items():\n","        if mode_action_count is None or v > mode_action_count:\n","            mode_action = k\n","            mode_action_count = v\n","            continue\n","\n","    return (mode_action + 1) % configuration.signs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"203THLPB6_vg","executionInfo":{"status":"ok","timestamp":1727874931397,"user_tz":-180,"elapsed":1,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"34bc35fd-fae5-42f9-f83c-7b0fdbe73b1e"},"execution_count":266,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting copy_statistical.py\n"]}]},{"cell_type":"markdown","source":[" Агент \"Случайный выбор\" (Random). Этот агент будет делать случайный выбор в каждой игре."],"metadata":{"id":"ymDb6G4VGNbG"}},{"cell_type":"code","source":["%%writefile random_agent.py\n","\n","def random_agent(observation, configuration):\n","    return random.randrange(0, 2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iDMAXKlGB2bJ","executionInfo":{"status":"ok","timestamp":1727874933620,"user_tz":-180,"elapsed":458,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"ac281d36-0e7a-4e48-e1e8-898e17a906e2"},"execution_count":267,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting random_agent.py\n"]}]},{"cell_type":"markdown","source":["Агент \"Игра по очереди\" (Alternator).\n","Этот агент будет чередовать свои ходы: рок, бумага, ножницы."],"metadata":{"id":"vm6zRER0GO9Z"}},{"cell_type":"code","source":["%%writefile alternator_agent.py\n","\n","def alternator_agent(observation, configuration):\n","    return observation.step % configuration.signs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TxQ-As4zCams","executionInfo":{"status":"ok","timestamp":1727874934968,"user_tz":-180,"elapsed":1,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"53ec5874-0e13-4890-feab-23d312c95f78"},"execution_count":268,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting alternator_agent.py\n"]}]},{"cell_type":"markdown","source":["4. Агент \"Побеждающий ход\" (Winning Move)\n","Этот агент будет пытаться всегда бить последний ход противника."],"metadata":{"id":"1jQQfVzNICRt"}},{"cell_type":"code","source":["%%writefile winning_move_agent.py\n","\n","def winning_move_agent(observation, configuration):\n","    if observation.step == 0:\n","        return random.randrange(0, configuration.signs)\n","    return (observation.lastOpponentAction - 1) % configuration.signs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AFAz_DiAC2Uu","executionInfo":{"status":"ok","timestamp":1727874936031,"user_tz":-180,"elapsed":578,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"9b019a3b-4e14-4715-82c7-c383cc619afe"},"execution_count":269,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting winning_move_agent.py\n"]}]},{"cell_type":"code","source":["%%writefile reactivity_agent.py\n","\n","def counter_reactionary(observation, configuration):\n","    global last_counter_action\n","    if observation.step == 0:\n","        last_counter_action = random.randrange(0, configuration.signs)\n","    elif get_score(last_counter_action, observation.lastOpponentAction) == 1:\n","        last_counter_action = (last_counter_action + 2) % configuration.signs\n","    else:\n","        last_counter_action = (observation.lastOpponentAction + 1) % configuration.signs\n","\n","    return last_counter_action"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"udmRgeJgFwS9","executionInfo":{"status":"ok","timestamp":1727874937632,"user_tz":-180,"elapsed":2,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"ec93dd07-cc1c-404d-f71c-8ed8f9e802f0"},"execution_count":270,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting reactivity_agent.py\n"]}]},{"cell_type":"markdown","source":["Агент \"Смена на 1\" (Shift)\n","Агент будет менять свой ход на 1 знак по кругу."],"metadata":{"id":"C-o3WlY4VVzY"}},{"cell_type":"code","source":["%%writefile shift_agent.py\n","\n","def shift_agent(observation, configuration):\n","    if observation.step == 0:\n","        return random.randrange(0, configuration.signs)\n","    return (observation.lastOpponentAction + 1) % configuration.signs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0peUFC-nVU8u","executionInfo":{"status":"ok","timestamp":1727874939398,"user_tz":-180,"elapsed":735,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"661520ff-f547-4252-e0d7-b53886d087da"},"execution_count":271,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting shift_agent.py\n"]}]},{"cell_type":"markdown","source":["Агент \"реакция на последний ход\" (Last Move Counter)\n","Этот агент будет реагировать на последний ход противника, чтобы победить его."],"metadata":{"id":"DsYB08YYW0vB"}},{"cell_type":"code","source":["%%writefile last_move_counter_agent.py\n","def last_move_counter_agent(observation, configuration):\n","    if observation.step == 0:\n","        return random.randrange(0, configuration.signs)\n","    return (observation.lastOpponentAction + 2) % configuration.signs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H27ef8B3W12J","executionInfo":{"status":"ok","timestamp":1727874941013,"user_tz":-180,"elapsed":1,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"112fb6ab-4fb6-4404-830c-7b5343b80ca3"},"execution_count":272,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing last_move_counter_agent.py\n"]}]},{"cell_type":"markdown","source":["Агент \"Побеждающий ход\" (Winning Move)\n","Этот агент будет пытаться всегда бить последний ход противника."],"metadata":{"id":"FTYbjhuMXT1l"}},{"cell_type":"code","source":["%%writefile winning_move_agent.py\n","def winning_move_agent(observation, configuration):\n","    if observation.step == 0:\n","        return random.randrange(0, configuration.signs)\n","    return (observation.lastOpponentAction + 1) % configuration.signs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-SiKttkuXUS-","executionInfo":{"status":"ok","timestamp":1727874942384,"user_tz":-180,"elapsed":824,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"88597b0d-0f81-4855-d07e-b6f77a2db22b"},"execution_count":273,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting winning_move_agent.py\n"]}]},{"cell_type":"code","source":["evaluate(\n","    \"rps\", #environment to use - no need to change\n","    [\"rock_agent.py\", \"reactivity_agent.py\"], #agents to evaluate\n","    configuration={\"episodeSteps\": 100} #number of episodes\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OiErOLmv7Xjd","executionInfo":{"status":"ok","timestamp":1727874942828,"user_tz":-180,"elapsed":1,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"2dd5e790-61f3-4229-fdc6-753bb7d231fa"},"execution_count":274,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[1, None]]"]},"metadata":{},"execution_count":274}]},{"cell_type":"markdown","source":["Турнир из 13 участников"],"metadata":{"id":"yc2rEeVqrO5O"}},{"cell_type":"code","source":["# создаем список из тренадцати агентов, участников турнира\n","agents = ['rock_agent.py', 'paper_agent.py', 'copy_statistical.py', 'copy_opponent.py', 'scissors_agent.py', 'random_agent.py', 'winning_move_agent.py', 'alternator_agent.py', 'copy_reactivity.py', 'reactivity_agent.py', 'shift_agent.py', 'last_move_counter_agent.py', 'winning_move_agent.py']\n","print(agents)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rJR4qBGjrRH1","executionInfo":{"status":"ok","timestamp":1727875174838,"user_tz":-180,"elapsed":453,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"ff1d5f92-da60-4d93-83b2-a010d4382bab"},"execution_count":278,"outputs":[{"output_type":"stream","name":"stdout","text":["['rock_agent.py', 'paper_agent.py', 'copy_statistical.py', 'copy_opponent.py', 'scissors_agent.py', 'random_agent.py', 'winning_move_agent.py', 'alternator_agent.py', 'copy_reactivity.py', 'reactivity_agent.py', 'shift_agent.py', 'last_move_counter_agent.py', 'winning_move_agent.py']\n"]}]},{"cell_type":"code","source":["def evaluate_tournament(agents, configuration):\n","    results = {}\n","\n","    # Каждый агент играет против каждого другого\n","    for i in range(len(agents)):\n","        for j in range(i + 1, len(agents)):\n","            agent_a = agents[i]\n","            agent_b = agents[j]\n","            print(f\"Starting match between {agent_a} and {agent_b}\")\n","            match_result = evaluate(\n","                \"rps\",  # environment to use\n","                [agent_a, agent_b],  # agents to evaluate\n","                configuration=configuration  # configuration for the episodes\n","            )\n","            # Обработка результатов\n","            results[(agent_a, agent_b)] = match_result\n","\n","    # Вывод результатов\n","    for match, result in results.items():\n","        print(f\"Match {match[0]} vs {match[1]}: {result}\")\n","\n","# Конфигурация турнира\n","configuration = {\n","    \"episodeSteps\": 100  # количество шагов в каждом эпизоде\n","}\n","\n","# Запускаем турнир\n","evaluate_tournament(agents, configuration)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ILUZp6Cmr9_I","executionInfo":{"status":"ok","timestamp":1727874954825,"user_tz":-180,"elapsed":8819,"user":{"displayName":"Андрей Долгов","userId":"03484552280472667237"}},"outputId":"0f6e4517-8c5d-46b9-cae6-7419959a2afc"},"execution_count":276,"outputs":[{"output_type":"stream","name":"stdout","text":["Starting match between rock_agent.py and paper_agent.py\n","Starting match between rock_agent.py and copy_statistical.py\n","Starting match between rock_agent.py and copy_opponent.py\n","Starting match between rock_agent.py and scissors_agent.py\n","Starting match between rock_agent.py and random_agent.py\n","Starting match between rock_agent.py and winning_move_agent.py\n","Starting match between rock_agent.py and alternator_agent.py\n","Starting match between rock_agent.py and copy_reactivity.py\n","Starting match between rock_agent.py and reactivity_agent.py\n","Starting match between rock_agent.py and shift_agent.py\n","Starting match between rock_agent.py and last_move_counter_agent.py\n","Starting match between rock_agent.py and winning_move_agent.py\n","Starting match between paper_agent.py and copy_statistical.py\n","Starting match between paper_agent.py and copy_opponent.py\n","Starting match between paper_agent.py and scissors_agent.py\n","Starting match between paper_agent.py and random_agent.py\n","Starting match between paper_agent.py and winning_move_agent.py\n","Starting match between paper_agent.py and alternator_agent.py\n","Starting match between paper_agent.py and copy_reactivity.py\n","Starting match between paper_agent.py and reactivity_agent.py\n","Starting match between paper_agent.py and shift_agent.py\n","Starting match between paper_agent.py and last_move_counter_agent.py\n","Starting match between paper_agent.py and winning_move_agent.py\n","Starting match between copy_statistical.py and copy_opponent.py\n","Starting match between copy_statistical.py and scissors_agent.py\n","Starting match between copy_statistical.py and random_agent.py\n","Starting match between copy_statistical.py and winning_move_agent.py\n","Starting match between copy_statistical.py and alternator_agent.py\n","Starting match between copy_statistical.py and copy_reactivity.py\n","Starting match between copy_statistical.py and reactivity_agent.py\n","Starting match between copy_statistical.py and shift_agent.py\n","Starting match between copy_statistical.py and last_move_counter_agent.py\n","Starting match between copy_statistical.py and winning_move_agent.py\n","Starting match between copy_opponent.py and scissors_agent.py\n","Starting match between copy_opponent.py and random_agent.py\n","Starting match between copy_opponent.py and winning_move_agent.py\n","Starting match between copy_opponent.py and alternator_agent.py\n","Starting match between copy_opponent.py and copy_reactivity.py\n","Starting match between copy_opponent.py and reactivity_agent.py\n","Starting match between copy_opponent.py and shift_agent.py\n","Starting match between copy_opponent.py and last_move_counter_agent.py\n","Starting match between copy_opponent.py and winning_move_agent.py\n","Starting match between scissors_agent.py and random_agent.py\n","Starting match between scissors_agent.py and winning_move_agent.py\n","Starting match between scissors_agent.py and alternator_agent.py\n","Starting match between scissors_agent.py and copy_reactivity.py\n","Starting match between scissors_agent.py and reactivity_agent.py\n","Starting match between scissors_agent.py and shift_agent.py\n","Starting match between scissors_agent.py and last_move_counter_agent.py\n","Starting match between scissors_agent.py and winning_move_agent.py\n","Starting match between random_agent.py and winning_move_agent.py\n","Starting match between random_agent.py and alternator_agent.py\n","Starting match between random_agent.py and copy_reactivity.py\n","Starting match between random_agent.py and reactivity_agent.py\n","Starting match between random_agent.py and shift_agent.py\n","Starting match between random_agent.py and last_move_counter_agent.py\n","Starting match between random_agent.py and winning_move_agent.py\n","Starting match between winning_move_agent.py and alternator_agent.py\n","Starting match between winning_move_agent.py and copy_reactivity.py\n","Starting match between winning_move_agent.py and reactivity_agent.py\n","Starting match between winning_move_agent.py and shift_agent.py\n","Starting match between winning_move_agent.py and last_move_counter_agent.py\n","Starting match between winning_move_agent.py and winning_move_agent.py\n","Starting match between alternator_agent.py and copy_reactivity.py\n","Starting match between alternator_agent.py and reactivity_agent.py\n","Starting match between alternator_agent.py and shift_agent.py\n","Starting match between alternator_agent.py and last_move_counter_agent.py\n","Starting match between alternator_agent.py and winning_move_agent.py\n","Starting match between copy_reactivity.py and reactivity_agent.py\n","Starting match between copy_reactivity.py and shift_agent.py\n","Starting match between copy_reactivity.py and last_move_counter_agent.py\n","Starting match between copy_reactivity.py and winning_move_agent.py\n","Starting match between reactivity_agent.py and shift_agent.py\n","Starting match between reactivity_agent.py and last_move_counter_agent.py\n","Starting match between reactivity_agent.py and winning_move_agent.py\n","Starting match between shift_agent.py and last_move_counter_agent.py\n","Starting match between shift_agent.py and winning_move_agent.py\n","Starting match between last_move_counter_agent.py and winning_move_agent.py\n","Match rock_agent.py vs paper_agent.py: [[-99.0, 99.0]]\n","Match rock_agent.py vs copy_statistical.py: [[-98.0, 98.0]]\n","Match rock_agent.py vs copy_opponent.py: [[0, 0]]\n","Match rock_agent.py vs scissors_agent.py: [[99.0, -99.0]]\n","Match rock_agent.py vs random_agent.py: [[1, None]]\n","Match rock_agent.py vs winning_move_agent.py: [[1, None]]\n","Match rock_agent.py vs alternator_agent.py: [[0, 0]]\n","Match rock_agent.py vs copy_reactivity.py: [[1, None]]\n","Match rock_agent.py vs reactivity_agent.py: [[1, None]]\n","Match rock_agent.py vs shift_agent.py: [[1, None]]\n","Match rock_agent.py vs last_move_counter_agent.py: [[1, None]]\n","Match paper_agent.py vs copy_statistical.py: [[-97.0, 97.0]]\n","Match paper_agent.py vs copy_opponent.py: [[0, 0]]\n","Match paper_agent.py vs scissors_agent.py: [[-99.0, 99.0]]\n","Match paper_agent.py vs random_agent.py: [[1, None]]\n","Match paper_agent.py vs winning_move_agent.py: [[1, None]]\n","Match paper_agent.py vs alternator_agent.py: [[0, 0]]\n","Match paper_agent.py vs copy_reactivity.py: [[1, None]]\n","Match paper_agent.py vs reactivity_agent.py: [[1, None]]\n","Match paper_agent.py vs shift_agent.py: [[1, None]]\n","Match paper_agent.py vs last_move_counter_agent.py: [[1, None]]\n","Match copy_statistical.py vs copy_opponent.py: [[20.0, -20.0]]\n","Match copy_statistical.py vs scissors_agent.py: [[99.0, -99.0]]\n","Match copy_statistical.py vs random_agent.py: [[1, None]]\n","Match copy_statistical.py vs winning_move_agent.py: [[1, None]]\n","Match copy_statistical.py vs alternator_agent.py: [[0, 0]]\n","Match copy_statistical.py vs copy_reactivity.py: [[1, None]]\n","Match copy_statistical.py vs reactivity_agent.py: [[1, None]]\n","Match copy_statistical.py vs shift_agent.py: [[1, None]]\n","Match copy_statistical.py vs last_move_counter_agent.py: [[1, None]]\n","Match copy_opponent.py vs scissors_agent.py: [[0, 0]]\n","Match copy_opponent.py vs random_agent.py: [[1, None]]\n","Match copy_opponent.py vs winning_move_agent.py: [[1, None]]\n","Match copy_opponent.py vs alternator_agent.py: [[-98.0, 98.0]]\n","Match copy_opponent.py vs copy_reactivity.py: [[1, None]]\n","Match copy_opponent.py vs reactivity_agent.py: [[1, None]]\n","Match copy_opponent.py vs shift_agent.py: [[1, None]]\n","Match copy_opponent.py vs last_move_counter_agent.py: [[1, None]]\n","Match scissors_agent.py vs random_agent.py: [[1, None]]\n","Match scissors_agent.py vs winning_move_agent.py: [[1, None]]\n","Match scissors_agent.py vs alternator_agent.py: [[0, 0]]\n","Match scissors_agent.py vs copy_reactivity.py: [[1, None]]\n","Match scissors_agent.py vs reactivity_agent.py: [[1, None]]\n","Match scissors_agent.py vs shift_agent.py: [[1, None]]\n","Match scissors_agent.py vs last_move_counter_agent.py: [[1, None]]\n","Match random_agent.py vs winning_move_agent.py: [[None, None]]\n","Match random_agent.py vs alternator_agent.py: [[None, 1]]\n","Match random_agent.py vs copy_reactivity.py: [[None, None]]\n","Match random_agent.py vs reactivity_agent.py: [[None, None]]\n","Match random_agent.py vs shift_agent.py: [[None, None]]\n","Match random_agent.py vs last_move_counter_agent.py: [[None, None]]\n","Match winning_move_agent.py vs alternator_agent.py: [[None, 1]]\n","Match winning_move_agent.py vs copy_reactivity.py: [[None, None]]\n","Match winning_move_agent.py vs reactivity_agent.py: [[None, None]]\n","Match winning_move_agent.py vs shift_agent.py: [[None, None]]\n","Match winning_move_agent.py vs last_move_counter_agent.py: [[None, None]]\n","Match winning_move_agent.py vs winning_move_agent.py: [[None, None]]\n","Match alternator_agent.py vs copy_reactivity.py: [[1, None]]\n","Match alternator_agent.py vs reactivity_agent.py: [[1, None]]\n","Match alternator_agent.py vs shift_agent.py: [[1, None]]\n","Match alternator_agent.py vs last_move_counter_agent.py: [[1, None]]\n","Match alternator_agent.py vs winning_move_agent.py: [[1, None]]\n","Match copy_reactivity.py vs reactivity_agent.py: [[None, None]]\n","Match copy_reactivity.py vs shift_agent.py: [[None, None]]\n","Match copy_reactivity.py vs last_move_counter_agent.py: [[None, None]]\n","Match copy_reactivity.py vs winning_move_agent.py: [[None, None]]\n","Match reactivity_agent.py vs shift_agent.py: [[None, None]]\n","Match reactivity_agent.py vs last_move_counter_agent.py: [[None, None]]\n","Match reactivity_agent.py vs winning_move_agent.py: [[None, None]]\n","Match shift_agent.py vs last_move_counter_agent.py: [[None, None]]\n","Match shift_agent.py vs winning_move_agent.py: [[None, None]]\n","Match last_move_counter_agent.py vs winning_move_agent.py: [[None, None]]\n"]}]}]}